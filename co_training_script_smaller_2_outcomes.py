# -*- coding: utf-8 -*-
"""Co-training_script_smaller_2_outcomes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11bt8r3-VYMnqFkTLzd1cNTEmySZv1geS
"""

import random 
import pandas as pd
import numpy as np
import scipy.sparse

from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score
from sklearn.feature_extraction.text import TfidfVectorizer

def cotraining_val(doc2vecmodel, val_folds_trns_in_list, val_folds_lbl_in_list, unlabelled_trns, max_feats_tfidf, p, n, CC, success_rate):
    
  valid_f1scores_tfidf = []
  valid_f1scores_doc2vec = []

  for i, (valid_fold_trns, valid_fold_lbl) in enumerate(zip(val_folds_trns_in_list, val_folds_lbl_in_list)):
    
    valid_trns_list_copy = val_folds_trns_in_list.copy()
    valid_lbl_list_copy = val_folds_lbl_in_list.copy()

    valid_trns = valid_fold_trns
    valid_lbls = valid_fold_lbl

    del valid_trns_list_copy[i]
    del valid_lbl_list_copy[i]
    
    labelled_trns = pd.concat(valid_trns_list_copy, ignore_index = True)
    labelled_lbls = pd.concat(valid_lbl_list_copy, ignore_index = True)

    feats700 = TfidfVectorizer(max_features = max_feats_tfidf)

    labelled_tfidf_representation = pd.DataFrame(feats700.fit_transform(labelled_trns).todense())
    unlabelled_tfidf_representation = pd.DataFrame(feats700.transform(unlabelled_trns).todense())
    valid_tfidf_representation = pd.DataFrame(feats700.transform(valid_trns).todense())
    
    labelled_doc2vec_rep_list = []

    for i in range(labelled_trns.shape[0]):

      infer_i = doc2vecmodel.infer_vector(labelled_trns.iloc[i])
      labelled_doc2vec_rep_list.append(infer_i)

    labelled_doc2vec_representation = pd.DataFrame(np.vstack(labelled_doc2vec_rep_list))

    #doc2vec representations for unlabelled training set

    unlabelled_doc2vec_rep_list = []
    
    for i in range(unlabelled_trns.shape[0]):

      infer_i = doc2vecmodel.infer_vector(unlabelled_trns.iloc[i])
      unlabelled_doc2vec_rep_list.append(infer_i)

    unlabelled_doc2vec_representation = pd.DataFrame(np.vstack(unlabelled_doc2vec_rep_list))

    #doc2vec representations for valid set

    valid_doc2vec_rep_list = []
    
    for i in range(valid_trns.shape[0]):

      infer_i = doc2vecmodel.infer_vector(valid_trns.iloc[i])
      valid_doc2vec_rep_list.append(infer_i)

    valid_doc2vec_representation = pd.DataFrame(np.vstack(valid_doc2vec_rep_list))

    #co-training procedure for reals begins

    while unlabelled_tfidf_representation.shape[0] > 0 :      
      
      SVM1 = SVC(C = CC, kernel = "linear")
      SVM2 = SVC(C = CC, kernel = "linear")

      SVM1.fit(labelled_tfidf_representation, labelled_lbls)         
      pred1_scores = SVM1.decision_function(unlabelled_tfidf_representation)                 
      
      SVM2.fit(labelled_doc2vec_representation, labelled_lbls)
      pred2_scores = SVM2.decision_function(unlabelled_doc2vec_representation)

      pred1_scores = pd.Series(pred1_scores, index = unlabelled_tfidf_representation.index)
      pred2_scores = pd.Series(pred2_scores, index = unlabelled_doc2vec_representation.index)

      pred1_neg_scores = pd.Series([])
      pred1_pos_scores = pd.Series([])
      pred2_neg_scores = pd.Series([])
      pred2_pos_scores = pd.Series([])      

      if SVM1.classes_[1] == 1: 
        
        pred1_neg_scores = pred1_scores[pred1_scores <= 0].sort_values()
        pred1_pos_scores = pred1_scores[pred1_scores > 0].sort_values(ascending = False)

      else: 
        
        pred1_neg_scores = pred1_scores[pred1_scores > 0].sort_values(ascending = False)
        pred1_pos_scores = pred1_scores[pred1_scores <= 0].sort_values()

      if SVM2.classes_[1] == 1:
        
        pred2_neg_scores = pred2_scores[pred2_scores <= 0].sort_values()
        pred2_pos_scores = pred2_scores[pred2_scores > 0].sort_values(ascending = False)

      else:
        
        pred2_neg_scores = pred2_scores[pred2_scores > 0].sort_values(ascending = False)
        pred2_pos_scores = pred2_scores[pred2_scores <= 0].sort_values()

      pos_indices_to_add = []
      neg_indices_to_add = []
      pos2_indices_to_add = []
      neg2_indices_to_add = []

      if pred1_pos_scores.shape[0]: 

        if pred1_pos_scores.shape[0] >= p: 

          pos_indices_to_add = pred1_pos_scores[:p].index.tolist()

        else: 

          pos_indices_to_add = pred1_pos_scores.index.tolist()
      
      neg1_indices_candidates = pred1_neg_scores.index.tolist()
      neg1_indices_eligible = [cand for cand in neg1_indices_candidates if cand not in pos_indices_to_add]

      if len(neg1_indices_eligible): 

        if len(neg1_indices_eligible) >= n: 

          neg_indices_to_add = neg1_indices_eligible[:n]

        else: 

          neg_indices_to_add = neg1_indices_eligible

      pos2_indices_candidates = pred2_pos_scores.index.tolist()
      pos2_indices_eligible = [cand for cand in pos2_indices_candidates if cand not in neg_indices_to_add]

      if len(pos2_indices_eligible): 

        if len(pos2_indices_eligible) >= p: 

          pos2_indices_to_add = pos2_indices_eligible[:p]
          
        else: 

          pos2_indices_to_add = pos2_indices_eligible

      final_pos_indices = set (pos_indices_to_add + pos2_indices_to_add)
  
      neg2_indices_candidates = pred2_neg_scores.index.tolist()
      neg2_indices_eligible = [cand for cand in neg2_indices_candidates if cand not in final_pos_indices]

      if len(neg2_indices_eligible): 

        if len(neg2_indices_eligible) >= n: 

          neg2_indices_to_add = neg2_indices_eligible[:n]
           
        else: 

          neg2_indices_to_add = neg2_indices_eligible
          

      final_neg_indices = set (neg_indices_to_add + neg2_indices_to_add)

      for ind in final_pos_indices: 

        ind_tfidf_representation = unlabelled_tfidf_representation.loc[ind, :]    
        ind_doc2vec_representation = unlabelled_doc2vec_representation.loc[ind, :]

        ind_tfidf_representation = ind_tfidf_representation.to_frame()    
        ind_doc2vec_representation = ind_doc2vec_representation.to_frame()

        ind_tfidf_representation = ind_tfidf_representation.transpose()    
        ind_doc2vec_representation = ind_doc2vec_representation.transpose()
        
        labelled_tfidf_representation = pd.concat([labelled_tfidf_representation, ind_tfidf_representation], ignore_index = True)
        labelled_doc2vec_representation = pd.concat([labelled_doc2vec_representation, ind_doc2vec_representation], ignore_index = True)

        unlabelled_tfidf_representation = unlabelled_tfidf_representation.drop(labels = ind, axis = 0)
        unlabelled_doc2vec_representation = unlabelled_doc2vec_representation.drop(labels = ind, axis = 0)

        one_series = pd.Series([1])
        labelled_lbls = labelled_lbls.append(one_series) 

      for ind in final_neg_indices: 

        ind_tfidf_representation = unlabelled_tfidf_representation.loc[ind, :]    
        ind_doc2vec_representation = unlabelled_doc2vec_representation.loc[ind, :]

        ind_tfidf_representation = ind_tfidf_representation.to_frame()    
        ind_doc2vec_representation = ind_doc2vec_representation.to_frame()

        ind_tfidf_representation = ind_tfidf_representation.transpose()    
        ind_doc2vec_representation = ind_doc2vec_representation.transpose()
        
        labelled_tfidf_representation = pd.concat([labelled_tfidf_representation, ind_tfidf_representation], ignore_index = True)
        labelled_doc2vec_representation = pd.concat([labelled_doc2vec_representation, ind_doc2vec_representation], ignore_index = True)

        unlabelled_tfidf_representation = unlabelled_tfidf_representation.drop(labels = ind, axis = 0)
        unlabelled_doc2vec_representation = unlabelled_doc2vec_representation.drop(labels = ind, axis = 0)

        zero_series = pd.Series([0])
        labelled_lbls = labelled_lbls.append(zero_series) 

    pred_valid_tfidf = SVM1.predict(valid_tfidf_representation)
    pred_valid_doc2vec = SVM2.predict(valid_doc2vec_representation)

    valid_f1scores_tfidf.append(f1_score(valid_lbls, pred_valid_tfidf))
    valid_f1scores_doc2vec.append(f1_score(valid_lbls, pred_valid_doc2vec))

  tfidf_average = sum(valid_f1scores_tfidf) / len(valid_f1scores_tfidf)
  doc2vec_average = sum(valid_f1scores_doc2vec) / len(valid_f1scores_doc2vec)
  
  return tfidf_average, doc2vec_average

def cotraining_test(doc2vecmodel, labelled_val_trns, labelled_val_lbl, test_trns, test_lbl, unlabelled_trns, max_feats_tfidf, p, n, CC, tfidf_result):
    
  feats700 = TfidfVectorizer(max_features = max_feats_tfidf)

  #tfidf representation of labelled, unlabelled and test datasets

  labelled_tfidf_representation = pd.DataFrame(feats700.fit_transform(labelled_val_trns).todense())
  unlabelled_tfidf_representation = pd.DataFrame(feats700.transform(unlabelled_trns).todense())
  test_tfidf_representation = pd.DataFrame(feats700.transform(test_trns).todense())
    
  #doc2vec representations for labelled training set
  
  labelled_doc2vec_rep_list = []

  for i in range(labelled_val_trns.shape[0]):

    infer_i = doc2vecmodel.infer_vector(labelled_val_trns.iloc[i])
    labelled_doc2vec_rep_list.append(infer_i)

  labelled_doc2vec_representation = pd.DataFrame(np.vstack(labelled_doc2vec_rep_list))

  #doc2vec representations for unlabelled training set

  unlabelled_doc2vec_rep_list = []
    
  for i in range(unlabelled_trns.shape[0]):

    infer_i = doc2vecmodel.infer_vector(unlabelled_trns.iloc[i])
    unlabelled_doc2vec_rep_list.append(infer_i)

  unlabelled_doc2vec_representation = pd.DataFrame(np.vstack(unlabelled_doc2vec_rep_list))

  #doc2vec representations for test set 

  test_doc2vec_rep_list = []

  for i in range(test_trns.shape[0]):

    infer_i = doc2vecmodel.infer_vector(test_trns.iloc[i])
    test_doc2vec_rep_list.append(infer_i)

  test_doc2vec_representation = pd.DataFrame(np.vstack(test_doc2vec_rep_list))

  #co-training procedure for begins

  while unlabelled_tfidf_representation.shape[0] > 0 :      
      
    SVM1 = SVC(C = CC, kernel = "linear")
    SVM2 = SVC(C = CC, kernel = "linear")

    SVM1.fit(labelled_tfidf_representation, labelled_val_lbl)         
    pred1_scores = SVM1.decision_function(unlabelled_tfidf_representation)                 
    
    SVM2.fit(labelled_doc2vec_representation, labelled_val_lbl)
    pred2_scores = SVM2.decision_function(unlabelled_doc2vec_representation)

    pred1_scores = pd.Series(pred1_scores, index = unlabelled_tfidf_representation.index)
    pred2_scores = pd.Series(pred2_scores, index = unlabelled_doc2vec_representation.index)

    pred1_neg_scores = pd.Series([])
    pred1_pos_scores = pd.Series([])
    pred2_neg_scores = pd.Series([])
    pred2_pos_scores = pd.Series([])      

    if SVM1.classes_[1] == 1: 
        
      pred1_neg_scores = pred1_scores[pred1_scores <= 0].sort_values()
      pred1_pos_scores = pred1_scores[pred1_scores > 0].sort_values(ascending = False)

    else: 
        
      pred1_neg_scores = pred1_scores[pred1_scores > 0].sort_values(ascending = False)
      pred1_pos_scores = pred1_scores[pred1_scores <= 0].sort_values()

    if SVM2.classes_[1] == 1:
        
      pred2_neg_scores = pred2_scores[pred2_scores <= 0].sort_values()
      pred2_pos_scores = pred2_scores[pred2_scores > 0].sort_values(ascending = False)

    else:
        
      pred2_neg_scores = pred2_scores[pred2_scores > 0].sort_values(ascending = False)
      pred2_pos_scores = pred2_scores[pred2_scores <= 0].sort_values()

    pos_indices_to_add = []
    neg_indices_to_add = []
    pos2_indices_to_add = []
    neg2_indices_to_add = []

    if pred1_pos_scores.shape[0]: 

      if pred1_pos_scores.shape[0] >= p: 

        pos_indices_to_add = pred1_pos_scores[:p].index.tolist()

      else: 

        pos_indices_to_add = pred1_pos_scores.index.tolist()
      
    neg1_indices_candidates = pred1_neg_scores.index.tolist()
    neg1_indices_eligible = [cand for cand in neg1_indices_candidates if cand not in pos_indices_to_add]

    if len(neg1_indices_eligible): 

      if len(neg1_indices_eligible) >= n: 

        neg_indices_to_add = neg1_indices_eligible[:n]

      else: 

        neg_indices_to_add = neg1_indices_eligible

    pos2_indices_candidates = pred2_pos_scores.index.tolist()
    pos2_indices_eligible = [cand for cand in pos2_indices_candidates if cand not in neg_indices_to_add]

    if len(pos2_indices_eligible): 

      if len(pos2_indices_eligible) >= p: 

        pos2_indices_to_add = pos2_indices_eligible[:p]
          
      else: 

        pos2_indices_to_add = pos2_indices_eligible

    final_pos_indices = set (pos_indices_to_add + pos2_indices_to_add)
  
    neg2_indices_candidates = pred2_neg_scores.index.tolist()
    neg2_indices_eligible = [cand for cand in neg2_indices_candidates if cand not in final_pos_indices]

    if len(neg2_indices_eligible): 

      if len(neg2_indices_eligible) >= n: 

        neg2_indices_to_add = neg2_indices_eligible[:n]
           
      else: 

        neg2_indices_to_add = neg2_indices_eligible
          
    final_neg_indices = set (neg_indices_to_add + neg2_indices_to_add)

    for ind in final_pos_indices: 

      ind_tfidf_representation = unlabelled_tfidf_representation.loc[ind, :]    
      ind_doc2vec_representation = unlabelled_doc2vec_representation.loc[ind, :]

      ind_tfidf_representation = ind_tfidf_representation.to_frame()    
      ind_doc2vec_representation = ind_doc2vec_representation.to_frame()

      ind_tfidf_representation = ind_tfidf_representation.transpose()    
      ind_doc2vec_representation = ind_doc2vec_representation.transpose()
        
      labelled_tfidf_representation = pd.concat([labelled_tfidf_representation, ind_tfidf_representation], ignore_index = True)
      labelled_doc2vec_representation = pd.concat([labelled_doc2vec_representation, ind_doc2vec_representation], ignore_index = True)

      unlabelled_tfidf_representation = unlabelled_tfidf_representation.drop(labels = ind, axis = 0)
      unlabelled_doc2vec_representation = unlabelled_doc2vec_representation.drop(labels = ind, axis = 0)

      one_series = pd.Series([1])
      labelled_val_lbl = labelled_val_lbl.append(one_series) 

    for ind in final_neg_indices: 

      ind_tfidf_representation = unlabelled_tfidf_representation.loc[ind, :]    
      ind_doc2vec_representation = unlabelled_doc2vec_representation.loc[ind, :]

      ind_tfidf_representation = ind_tfidf_representation.to_frame()    
      ind_doc2vec_representation = ind_doc2vec_representation.to_frame()

      ind_tfidf_representation = ind_tfidf_representation.transpose()    
      ind_doc2vec_representation = ind_doc2vec_representation.transpose()
        
      labelled_tfidf_representation = pd.concat([labelled_tfidf_representation, ind_tfidf_representation], ignore_index = True)
      labelled_doc2vec_representation = pd.concat([labelled_doc2vec_representation, ind_doc2vec_representation], ignore_index = True)

      unlabelled_tfidf_representation = unlabelled_tfidf_representation.drop(labels = ind, axis = 0)
      unlabelled_doc2vec_representation = unlabelled_doc2vec_representation.drop(labels = ind, axis = 0)

      zero_series = pd.Series([0])
      labelled_val_lbl = labelled_val_lbl.append(zero_series) 

  pred_test_tfidf = SVM1.predict(test_tfidf_representation)
  pred_test_doc2vec = SVM2.predict(test_doc2vec_representation)

  test_f1scores_tfidf = f1_score(test_lbl, pred_test_tfidf)
  test_f1scores_doc2vec = f1_score(test_lbl, pred_test_doc2vec) 
  
  if tfidf_result: 
    return test_f1scores_tfidf

  else: 
    return test_f1scores_doc2vec