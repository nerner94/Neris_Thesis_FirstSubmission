# -*- coding: utf-8 -*-
"""Co-training_script_benchmark_only.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JVfGqc3OoIcYEoRkqOEUoIhKFyiinIQ2
"""

import random 
import pandas as pd
import numpy as np
import scipy.sparse

from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score
from sklearn.feature_extraction.text import TfidfVectorizer

def benchmark_SVM(val_folds_trns_in_list, val_folds_lbl_in_list, max_feats_tfidf, CC):
    
  valid_tfidf_f1scores = []

  for i, (valid_fold_trns, valid_fold_lbl) in enumerate(zip(val_folds_trns_in_list, val_folds_lbl_in_list)):
    
    valid_trns_list_copy = val_folds_trns_in_list.copy()
    valid_lbl_list_copy = val_folds_lbl_in_list.copy()

    valid_trns = valid_fold_trns
    valid_lbls = valid_fold_lbl

    del valid_trns_list_copy[i]
    del valid_lbl_list_copy[i]
    
    labelled_trns = pd.concat(valid_trns_list_copy, ignore_index = True)
    labelled_lbls = pd.concat(valid_lbl_list_copy, ignore_index = True)

    feats700 = TfidfVectorizer(max_features = max_feats_tfidf)
    labelled_tfidf_representation = pd.DataFrame(feats700.fit_transform(labelled_trns).todense())
    valid_tfidf_representation = pd.DataFrame(feats700.transform(valid_trns).todense())
    
    SVM1 = SVC(C = CC, kernel = "linear")
    
    SVM1.fit(labelled_tfidf_representation, labelled_lbls)
    
    pred_valid_tfidf = SVM1.predict(valid_tfidf_representation)
      
    valid_tfidf_f1scores.append(f1_score(valid_lbls, pred_valid_tfidf))
    
  tfidf_f1_av = sum(valid_tfidf_f1scores) / len(valid_tfidf_f1scores)
  
  return tfidf_f1_av

def benchmark_doc2vec(doc2vecmodel, val_folds_trns_in_list, val_folds_lbl_in_list, CC):
    
  valid_doc2vec_f1scores = []

  for i, (valid_fold_trns, valid_fold_lbl) in enumerate(zip(val_folds_trns_in_list, val_folds_lbl_in_list)):
    
    valid_trns_list_copy = val_folds_trns_in_list.copy()
    valid_lbl_list_copy = val_folds_lbl_in_list.copy()

    valid_trns = valid_fold_trns
    valid_lbls = valid_fold_lbl

    del valid_trns_list_copy[i]
    del valid_lbl_list_copy[i]
    
    labelled_trns = pd.concat(valid_trns_list_copy, ignore_index = True)
    labelled_lbls = pd.concat(valid_lbl_list_copy, ignore_index = True)

    labelled_doc2vec_rep_list = []

    for i in range(labelled_trns.shape[0]):

      infer_i = doc2vecmodel.infer_vector(labelled_trns.iloc[i])
      labelled_doc2vec_rep_list.append(infer_i)

    labelled_doc2vec_representation = pd.DataFrame(np.vstack(labelled_doc2vec_rep_list))

    valid_doc2vec_rep_list = []
    
    for i in range(valid_trns.shape[0]):

      infer_i = doc2vecmodel.infer_vector(valid_trns.iloc[i])
      valid_doc2vec_rep_list.append(infer_i)

    valid_doc2vec_representation = pd.DataFrame(np.vstack(valid_doc2vec_rep_list))

    SVM2 = SVC(C = CC, kernel = "linear")
    
    SVM2.fit(labelled_doc2vec_representation, labelled_lbls)
    
    pred_valid_doc2vec = SVM2.predict(valid_doc2vec_representation)
      
    valid_doc2vec_f1scores.append(f1_score(valid_lbls, pred_valid_doc2vec))
    
  doc2vec_f1_av = sum(valid_doc2vec_f1scores) / len(valid_doc2vec_f1scores)
  
  return doc2vec_f1_av